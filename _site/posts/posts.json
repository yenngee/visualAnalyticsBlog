[
  {
    "path": "posts/2021-05-28-dataviz-makeover-1/",
    "title": "DataViz Makeover 1",
    "description": "My DataViz Makeover 1. Based on the assignment [here](https://isss608.netlify.app/dataviz/dataviz1)",
    "author": [
      {
        "name": "Ng Yen Ngee",
        "url": "https://www.linkedin.com/in/ng-yen-ngee/"
      }
    ],
    "date": "2021-05-28",
    "categories": [],
    "contents": "\r\n1 Critique of Visualization\r\nOriginal visualization can be seen below: \r\nBy Aesthetics\r\nNo.\r\nDescription of Critique\r\nConsequence/Remark\r\nA1\r\nThe font size of the overall title is smaller than the subtitle of each graph.\r\nThe attention is immediately drawn to each country’s names instead of the main title which would tell us what this graph is telling us.\r\nA2\r\nThere is no annotation to convey insights\r\nThe visualization just presents a bunch of numbers where audience are unable to make head or tails of.  e.g. there is a dip in both exports and imports for Mainland China during 2020 that is likely due to spreading of COVID and annotation should include events like this.\r\nA3\r\nGraphs is in a 2 by 3 grid.\r\nGives the impression that the category splitting the row is different from the category splitting the column which is not true. It also makes it difficult to compare information across countries.\r\nA4\r\nThere is no order in the placement of countries.\r\nMore insights can be derived if we ordered the data in a logical way.\r\nA5\r\nOverlapping of area chart colours makes it rather ugly and difficult to read\r\n\r\nBy Clarity\r\nNo.\r\nDescription of Critique\r\nConsequence/Remark\r\nC1\r\nThe width of the x-axis is all different for all countries.\r\nGives the wrong impression that some countries have more Export/Import based on area.\r\nC2\r\nThe range of the x-axis is different for Japan, and only shows 2020 on the x-axis\r\nGives the wrong impression that there is no trade in 2019.\r\nC3\r\nWithin a single subplot, the left and right y-axis have different ranges and scale, resulting in similar heights of area chart between Exports and Imports.\r\nGives the wrong impression that the amount of Import and Export are around the same for all countries. However, this may not be true.  E.g. for Hong Kong, Export ranges below 1 Million while Imports ranges above 4 Million.\r\nC4\r\nThe y-axis across all 6 countries has different scales and ranges resulting in similar heights of area charts across countries.\r\nGives the wrong impression that trade is consistent across all countries. However, if 2 countries are being compared it is apparent that this is not true.  E.g. Hong Kong vs Mainland China, Mainland China has higher amount of Import than Hong Kong\r\nC5\r\nThe x-axis and y-axis have no tick marks even through it is a quantitative scale.\r\nIt makes data difficult to read.\r\nC6\r\nArea charts used to represent Export and Import are overlapping.\r\nArea charts are best used for establishing part-to-whole relationship or to exaggerate change.\r\n2 Visualization Makeover\r\nProposed Design\r\nConsidering that we want to minimize changes made to the original visualization as much as possible, the visualization has been redesigned as follows:\r\n\r\nBelow I will discuss the various key changes that has been made and explain why the changes were made and which critique in the earlier section did these changes overcome:\r\nKeeping area chart type but stacking them instead. \r\nAs we are looking at Singapore’s top 6 merchandise trading partners and not just each countries’ export and import, it was decided to use stacked area chart to visualize the merchandise trade (sum of import and export) which shows the part to whole relationship well. Hence, we are also able to see the proportion of import and export relative to the sum of them like how Hong Kong has a very low import but actually has higher overall merchandise trade than that of Japan. This overcomes the issues raised in C6 and A5.\r\nUsing a single y-axis.\r\nOne of the key confusing points in the original design was that the y-axis keeps changing for both imports and exports and for all six countries stated in C3 and C4. Hence, in the proposed design, merchandise trade of each country shares the same y-axis on the left by placing all 6 countries on the same axis, dividing the visualization into 6 subplots horizontally instead of a 3 by 2 grid (discussed in A3). This also makes it easier to compare number across countries.\r\nCountries’ merchandise trade are ranked in descending order\r\nWe know the top 6 trading countries, but do we know the country with the highest merchandise trade? Do we know out of the 6 countries, which country has the lowest trade? This was one of the critique made in A4 which we corrected by adding the order in which the countries are placed so that we can see this ranking at a single glance.\r\nUsing Quarterly data instead of monthly data\r\nUnfortunately, one drawback of using a single y-axis and comparing 6 countries like this in 6 horizontal subplots is that each subplot has limited x-axis space. If we were to show 2 years worth of monthly data, the level of detail shown by the area of chart would be too messy. Keeping in mind that we want to show Singapore’s top 6 trading partners across 2 years, it was decided that aggregating to quarterly data is sufficient to show just enough variation across time and yet not over complicate the visualization.\r\nConsistent x-axis range in each subplot.\r\nTo solve C1 and C2, we ensured that the axis in each subplot is of the same width, with the same range starting from 2019 Q1 to 2020 Q4.\r\nOther fixes\r\nOther fixes were made such as\r\nEnsuring that the visualization title has the largest font (A1)\r\nAdding annotations referring to certain portions of the graph to deliver insights more effectively (A2)\r\nEnsuring that y-axis and x-axis all have tick marks (C5)\r\nProposed Visualization (link)\r\n3. Step by Step Guide\r\nIn this portion, we will be running through the steps to create the final proposed visualization starting from loading and understanding the data, then we will run through what is done to prepare the data and finally creating the visualization on Tableau.\r\nLoading and Understanding the data\r\nThe Data obtained from the subsection of Merchandise Trade by Region/Market and was downloaded by clicking on the link Download all in Excel on the same web page.\r\nOpening the Excel file we see that there are 3 tabs. * Content – describes the content of the data in each page, hence we will not use this sheet. * T1 – Merchandise Imports * T2 – Merchandise Exports\r\n On the top and bottom of the tab, there are notes which we would need to remove in our data preparation step. The header row starts from 6th row. There is data with countries represented by row and monthly data represented by columns. Looking at the first few rows, there are also aggregated such as Total Merchandise and regional data such as Asia(Million Dollars) which we will need to remove. Across the columns, we would also only need to extract data from 2019 Jan to 2020 Dec. T2 has a similar structure as T1 and will be prepared in a similar way.\r\nscreenshot of top few rows of T1: \r\nscreenshot of bottom few rows of T1: \r\nIn our proposed visualization, we are looking at both exports and imports in a stacked area chart across time and country. Hence, we will need to prepare the data such that it is in a long format which makes it easier to manipulate in Tableau. The final form of the data should look something like this: \r\nData Preparation\r\nWe will be using Tableau Prep Builder to prepare the data. Each step is explained carefully such that it can also be replicated using alternative means.\r\nStep 1: Connect to Data Source\r\nAfter opening Tableau Prep Builder Software, we first need to connect to the Data Source. In this case, we will connect to the excel file that was previously downloaded.\r\n\r\nStep 2: Add Data to Flow\r\nIn the new interface, drag and drop T1 onto the working space on the right. Tableau Prep Builder will automatically load the data. However, we can see that it has also included the notes that we need to delete. Tableau has a handy button on the left called Use Data Interpreter which automatically extracts the table data without us having the manually delete the columns.\r\n\r\nFrom there, if we right click on T1, we can choose various steps to treat the data. We will first clean the data.\r\n\r\nStep 3a: Clean T1 - filter the data\r\nAt this step, our data looks like this.\r\n\r\nAs mentioned in Loading and Understanding the data section, we need to exclude the aggregated data. Selecting the first 7 rows until “European Union (Million Dollars)”, we can right click and select Exclude to exclude these data. At the same time, our visualization only include data from 2019 to 2020. Hence, we select the columns from all other dates and select remove. What is left is the Import data of all countries from 2019 to 2020.\r\nNote: at this point, we could possibly only keep data from the 6 countries identified in the original visualization. It was just a personal choice to keep all of the data for now, so that we can do other visualization with all of the trade data for fun. ;)\r\n\r\nStep 3b: Clean T1 - Split column to get country\r\nIf we look under variables, we know that it is in the format of “white space” + “country name” + “(Thousand Dollars)”. We want to only extract the country name, keeping in mind the values are in thousands. Hence, if we click the 3 dots on the column, we can do an automatic split which will extract country name. The original column is then removed as we do not need it and the new column name is changed to Country.\r\n\r\nThe data after this step should look like this: \r\nStep 4: Pivot T1\r\nNext, we have to convert all the data in each column and pivot them into rows. To do so, we first select all the columns except for Country, and click on Pivot Columns to Rows.\r\n This will automatically create a pivot step where they will keep the Country as it is and create row with each row containing the value found within the original column. We rename Pivot1 Names as “Date” and Pivot1 Values as “Import (in thousand)”\r\n\r\nRepeat steps 2 to 4 for T2, except to rename the column after pivoting as ‘Export (in thousand)’ since T2 has the same structure as T1.\r\nStep 5: Join Pivoted T1 and Pivoted T2\r\nNow we would like to combine the data set. There are different ways of doing this. However, I chose to inner join the two data sets on Country and Date. This means that the data left are countries that must have both import and export throughout the period of 2019 and 2020.\r\nTo do this, we simply drag Pivot 2 over Pivot 1 under the join option which will appear when you hover over it. This will be the result after removing the duplicated columns of Date and Country:\r\n\r\nNote: a manual check confirms that the 6 countries that we are concerned with is part of this data set.\r\nStep 6: Clean\r\nAt this point, it is easy to convert the Import(in thousands) and Export(in thousands) to the values multiply by 1000. Clicking the 3 dots, we select Create Calculated Field, then Custom Calculation.\r\n\r\nWe’ll come to this pop up where we can key in our new column. We will follow the following formulas:\r\nExport = [Export(in thousands)] * 1000\r\nImport = [Import(in thousands)] * 1000\r\n\r\nWe remove the old columns and select the 2 new columns (Import & Export) and pivot them again.\r\nStep 7: Pivot + Final Clean\r\nWe are very close to the final table that we need. We just need to do a final check on the column name data type and change them where necessary:\r\ncolumn name change: + Pivot1 Name to Trade Type + Pivot1 Value to Amount data type change: + Date: from string to date type\r\nHere is the final table: \r\nIn the work space, we can also see the following work flow: \r\nStep 8: Output\r\nWe could create an output node to output the data. However, Tableau Data Prep allows us to have a shortcut. By right-click on the last node and selecting Preview in Tableau Desktop, we can create the visualization directly.\r\nCreate Visualization\r\nWe will be using Tableau Desktop to create the visualization and this section will provide a step by step guide to do so.\r\n4 Derived Insights\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-05-29T18:33:41+08:00",
    "input_file": "dataviz-makeover-1.utf8.md"
  },
  {
    "path": "posts/2021-05-22-my-first-post/",
    "title": "My first post",
    "description": "Learning how to do R Markdown following lecture from prof.",
    "author": [
      {
        "name": "Ng Yen Ngee",
        "url": "https://www.linkedin.com/in/ng-yen-ngee/"
      }
    ],
    "date": "2021-05-22",
    "categories": [],
    "contents": "\r\n1.0 Overview\r\nIn this article, we will show you how to plot a figure with multiple histograms by using ggplot2 and ggpubr packages.\r\n2.0 Installing and Launching R Packages\r\nBefore you get started, you are required:\r\nto start a new R project, and\r\nto create a new R Markdown document.\r\n\r\nTo insert a graph.\r\n\r\nNext, you will use the code chunk below to install and launch ggpubr and tidyverse in RStudio.\r\nR code\r\npackages = c(‘ggpubr’, ‘tidyverse’)\r\nfor(p in packages){library if(!require(p, character.only = T)){ install.packages(p) } library(p, character.only = T) }\r\n3.0 Importing and Preparing The Data Set\r\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\r\n3.1 Importing Data\r\nFirst, let us import the data into R by using read_csv() of readr package.\r\nR code\r\nwine <- read_csv(“data/wine_quality.csv”)\r\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type.\r\n4.0 Univariate EDA with Histogram\r\nIn the figure below, multiple histograms are plottted by using ggplot() and geom_histogram() of ggplot2 package. Then, ggarrange() of ggpubr package is used to patch these histogram into a single figure to reveal the distribution of the selected variables in the wine quality data sets.\r\nRcode\r\nfa <- ggplot(data=wine, aes(x= fixed acidity)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) va <- ggplot(data=wine, aes(x= volatile acidity)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) ca <- ggplot(data=wine, aes(x= citric acid)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) rs <- ggplot(data=wine, aes(x= residual sugar)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) ch <- ggplot(data=wine, aes(x= chlorides)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) fSO2 <- ggplot(data=wine, aes(x= free sulfur dioxide)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) tSO2 <- ggplot(data=wine, aes(x= total sulfur dioxide)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) density <- ggplot(data=wine, aes(x= density)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) pH <- ggplot(data=wine, aes(x= pH)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) sulphates <- ggplot(data=wine, aes(x= sulphates)) + geom_histogram(bins=20, color=“black”, fill=“light blue”) alcohol <- ggplot(data=wine, aes(x= alcohol)) + geom_histogram(bins=20, color=“black”, fill=“light blue”)\r\nggarrange(fa, va, ca, rs, ch, fSO2, tSO2, density, pH, sulphates, alcohol, ncol = 4, nrow = 3)\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-05-22T12:31:58+08:00",
    "input_file": {}
  }
]
